/**
 * Copyright (c) 2014 - 2019, Nordic Semiconductor ASA
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form, except as embedded into a Nordic
 *    Semiconductor ASA integrated circuit in a product or a software update for
 *    such product, must reproduce the above copyright notice, this list of
 *    conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 *
 * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * 4. This software, with or without modification, must only be used with a
 *    Nordic Semiconductor ASA integrated circuit.
 *
 * 5. Any software provided in binary form under this license must not be reverse
 *    engineered, decompiled, modified and/or disassembled.
 *
 * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
/**
 * @brief BLE LED Button Service central and client application main file.
 *
 * This example can be a central for up to 8 peripherals.
 * The peripheral is called ble_app_blinky and can be found in the ble_peripheral
 * folder.
 */

//IACT
//IACT
//IACT

#include "master_util.h"


// TODO(100): Declare & define the code related with accelerometer. (~Sprint 12) to Sam
static axis3bit16_t          data_raw_acceleration;                                 /**< Load raw data from iis2dlpc sensor into this variable. */ 
static iis2dlpc_ctx_t        dev_ctx;                                               /**< Handle iis2dlpc sensor's read/write instance with this variable. */
static uint8_t               whoamI, rst;                                           /**< Validate iis2dlpc sensor address and status to use. */ 
static float acceleration_mg[3];                                                    /**< Convert raw data to float(usable) data into this variable by using iis2dlpc sdk. */
static float previous_value[3] = {0};                                                 /**< Previous data to use dto62 private function. */


//heo
static int count = 0;
static float data[5][SIZE] = {0.0, }; // x, y, z, a, b
static float cal_data[3][5] = {0.0, }; //cal_data[0] = average, cal_data[1] = standard deviation, cal_data[2] = Count
static float similarity[2] = {0.0, }; // similarity[0] = flag, similarity[1] = highest similarity value 

static const float S[15] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 5.0, 5.0, 20.0, 20.0}; // contributing constants
static const float w[15] = {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}; // correction factor
//static const float Am[15] = {6.1, 6.1, 121.7, 2.9, 2.7, 0.21, 0.6, 0.6, 0.11, 0.6, 20.1, 20.1, 20.1, 50.1, 50.1}; //x,y,z,a,b data of avrg, stdev and count following exp 1 data
static const float Alpha = 1.00; // 2nd standard value
static const float Beta = 0.50; // 1st standard value
//heo


NRF_BLE_GATT_DEF(m_gatt);                                                       /**< GATT module instance. */
BLE_NUS_C_ARRAY_DEF(m_ble_nus_c, NRF_SDH_BLE_TOTAL_LINK_COUNT);
BLE_DB_DISCOVERY_ARRAY_DEF(m_db_disc, NRF_SDH_BLE_TOTAL_LINK_COUNT);            /**< Database discovery module instances. */
NRF_BLE_SCAN_DEF(m_scan);                                                       /**< Scanning Module instance. */
NRF_TWI_MNGR_DEF(m_nrf_twi_mngr, MAX_PENDING_TRANSACTIONS, 0);                          /**< TWI transaction manager instance. */
NRF_TWI_SENSOR_DEF(m_nrf_twi_sensor, &m_nrf_twi_mngr, NRF_TWI_SENSOR_SEND_BUF_SIZE);    /**< TWI sensor instance. */
APP_TIMER_DEF(m_repeated_timer_id);
APP_TIMER_DEF(m_psm_timer_id);
APP_TIMER_DEF(m_lte_timer_id);

static nrf_saadc_channel_config_t ch_config_bat = NRF_DRV_SAADC_DEFAULT_CHANNEL_CONFIG_SE(BAT_PIN);         /**< The saadc cnannel configuration of battery(vdd). */
static const nrf_drv_timer_t m_timer = NRF_DRV_TIMER_INSTANCE(3);               /**< The channel of used timer triver. */
static char const m_target_periph_name[] = "Nordic_Blinky";                     /**< Name of the device to try to connect to. This name is searched for in the scanning report data. */

static nrf_saadc_value_t m_buffer_pool[2][SAMPLES_IN_BUFFER];                                      /**< The storage of 4 values which are results of saadc. */
static nrf_ppi_channel_t     m_ppi_channel;                                     /**< The ppi instance for interconnecting timer and saadc. */
static uint16_t m_ble_nus_max_data_len = BLE_GATT_ATT_MTU_DEFAULT - OPCODE_LENGTH - HANDLE_LENGTH;          /**< The maximum length of ble data. */
static uint8_t m_ble_nus_c_count;                                               /**< The instance of present connected count of ble devices. */

static uint8_t                          m_new_command_received = 0;
static uint8_t                          m_new_resolution, m_new_phy;
static arducam_mini_2mp_init_t          m_camera_init;


static uint8_t   saadc_counter = 0;

static uint8_t temp_array[BLE_NUS_MAX_DATA_LEN];
static uint8_t* temp_current = temp_array;

static uint8_t acc_array_master[1023];
static uint8_t* acc_current_master = acc_array_master;

static uint8_t acc_array_slave[1023];
static uint8_t* acc_current_slave = acc_array_slave;


static uint8_t acc_array_test[1023];
static uint8_t* acc_current_test = acc_array_test;

int slave_count = 0;



static bool	 run_time_updates	 = false;
static bool	 reptForCtTime		 = false;
static bool      new_dev                 = false;
static bool      reptCrimeCount          = false;
static volatile bool      saadc                   = false;

static int batlevel=0;
static int acccount=0;

static int array_size=25;              // 25 -> 30
static int target=12;
static int cal_num=0;













int main(void)
{
    
 

    static int cal=0;
    static float cal_avg=0;
    static float cal_var=0;
    static float cal_std=0;
    static float gi[100]={0};
    static float ri=0;
    static float w=0;
    static float oi_1[100]={0};
    static float oi_2[100]={0};



    int data_array1;
    int data_array2;
    static int num_array[100]={0};

    FILE *fp = fopen("home_2mwalk3.txt", "r");   
     
    while (feof(fp) == 0) {
      
      cal++;

      fscanf(fp, "%d %d", &data_array1, &data_array2);
      printf("%d  %d\n", data_array1, data_array2);
      
      num_array[0]=data_array2;

      if(cal <= array_size) {
        memmove(num_array+1, num_array, sizeof(int)*99);
      }

      for(int i=array_size; i>0; i--) {
        cal_avg += (float)num_array[i]/array_size;
      }
      for(int i=array_size; i>0; i--) {
        cal_var += pow(num_array[i]-cal_avg,2)/array_size;
      }
      
      cal_std =  sqrt(cal_var);
      printf("cal_std_first : %f\n",cal_std);   
   
      for(int i=array_size; i>0; i--) {
        gi[i] = 1/(cal_std*sqrt(2*M_PI))*expf(-pow((num_array[i]-cal_avg),2)/(2*cal_var));
      }

      for(int i=array_size; i>0; i--) {
        ri += num_array[i]*gi[i]; 
      }

      printf("ri_first : %f\n",ri);
      printf("%f\n",cal_var);
      w=1-20/cal_var;

      if(w<0) {
        w=0;
      }

      printf("w : %f\n", w);

     
      oi_1[0] = w*(num_array[target]);
      
      if(cal >= array_size) {
        memmove(num_array+1, num_array, sizeof(int)*99);
        memmove(oi_1+1, oi_1, sizeof(float)*99);
      }

      acc_current_test += sprintf(acc_current_test, "%d   %d   %f   %f", cal, num_array[12], oi_1[0], cal_var);

      printf(acc_array_test);
      printf("\n");

      FILE* pFile = fopen("home_2mwalk3_.txt", "a");
      fputs(acc_array_test, pFile);
      fputs("\n", pFile);
      fclose(pFile);

      memset(acc_array_test, 0, sizeof(acc_array_test));
      acc_current_test = acc_array_test;
      

      printf("\n");
      printf("\n");

      ri=0;
      cal_avg=0;
      cal_var=0;
    }

/* old
// first
 if(cal ==array_size) {                                                                    
  //First
    for(int i=array_size; i>0; i--) {
      cal_avg += (float)num_array[i]/array_size;
    }

    
    for(int i=array_size; i>0; i--) {
      cal_var += pow(num_array[i]-cal_avg,2)/array_size;
    }
    
    cal_std =  sqrt(cal_var);
    printf("cal_std_first : %f\n",cal_std);   

    
    for(int i=array_size; i>0; i--) {
      gi[i] = 1/(cal_std*sqrt(2*M_PI))*expf(-pow((num_array[i]-cal_avg),2)/(2*cal_var));
    }
    


    for(int i=array_size; i>0; i--) {
      ri += num_array[i]*gi[i]; 
    }
    printf("ri_first : %f\n",ri);
    printf("%f\n",cal_var);
    w=1-20/cal_var;

    if(w<0) {
      w=0;
    }

    printf("w : %f\n", w);

    for(int i=array_size; i>0; i--) {
      oi_1[i] = w*(num_array[i]);
      if(oi_1[i]<=0) {
        oi_1[i]=0;
      }
    }
*/


/* 
// second
    cal_avg=0;
    cal_var=0;
    ri=0;

    printf("\n");

    //Second
    if(w==0){

      for(int i=array_size; i>0; i--) {
      oi_2[i]=0;
      }
    
    }     
    else {

    for(int i=array_size; i>0; i--) {
      cal_avg += (float)oi_1[i]/array_size;
    }

    //printf("cal_avg_second : %f\n", cal_avg);
    for(int i=array_size; i>0; i--) {
      cal_var += pow(oi_1[i]-cal_avg,2)/array_size;
    }
    
    cal_std =  sqrt(cal_var);
    printf("cal_std_second : %f\n",cal_std);
    
    for(int i=array_size; i>0; i--) {
      gi[i] = 1/(cal_std*sqrt(2*M_PI))*expf(-pow((oi_1[i]-cal_avg),2)/(2*cal_var));
    }
    
    

    for(int i=array_size; i>0; i--) {
      ri += oi_1[i]*gi[i]; 
    }
    printf("ri_second : %f\n",ri);
    printf("%f\n",cal_var);
    w=1-1/cal_var;

    if(w<0) {
      w=0;
    }

    printf("w : %f\n", w);

    for(int i=array_size; i>0; i--) {
      oi_2[i] = w*(oi_1[i]-ri);
      if(oi_2[i]<=0) {
        oi_2[i]=0;
      }
    }

    }
*/
  //done


/*
    for(int i=array_size; i>0; i--) {

      
      cal_num++;

      //acc_current_test += sprintf(acc_current_test, "%d   %d   %f   %f", cal_num, num_array[i], oi_1[i], oi_2[i]);
      acc_current_test += sprintf(acc_current_test, "%d   %d   %f   %f", cal_num, num_array[i], oi_1[i], cal_var );
      
      printf(acc_array_test);
      printf("\n");


      FILE* pFile = fopen("home_1mwalk3_.txt", "a");

      fputs(acc_array_test, pFile);
      fputs("\n", pFile);
      fclose(pFile);

      memset(acc_array_test, 0, sizeof(acc_array_test));
      acc_current_test = acc_array_test;
    
    }

    printf("\n");
    printf("\n");

    ri=0;
    cal_avg=0;
    cal_var=0;
    cal=0;
    }


    //memmove(num_array+1,num_array,sizeof(int)*99);
  }
  */

    fclose(fp);   
    
    

   



     for (;;)
    {

        //readAcc();
        nrf_delay_ms(1000);
        //idle_state_handle();
        printf("working");
        
    }
}